{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 52, "column": 0}, "map": {"version":3,"sources":["file:///Users/phil/Dev/philplaysbass/app/api/spotify/token/route.ts"],"sourcesContent":["export async function POST(req: Request) {\n\ttry {\n\t\tconst body = await req.json();\n\t\tconst code = body.code;\n\n\t\tif (!code) {\n\t\t\treturn new Response(\n\t\t\t\tJSON.stringify({ error: \"Missing authorization code\" }),\n\t\t\t\t{\n\t\t\t\t\tstatus: 400,\n\t\t\t\t\theaders: { \"Content-Type\": \"application/json\" },\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\n\t\tconst client_id = process.env.NEXT_PUBLIC_SPOTIFY_CLIENT_ID!;\n\t\tconst client_secret = process.env.SPOTIFY_CLIENT_SECRET!;\n\t\tconst redirect_uri = process.env.NEXT_PUBLIC_SPOTIFY_REDIRECT_URI!;\n\n\t\tconst credentials = Buffer.from(`${client_id}:${client_secret}`).toString(\n\t\t\t\"base64\"\n\t\t);\n\n\t\tconst tokenRes = await fetch(\"https://accounts.spotify.com/api/token\", {\n\t\t\tmethod: \"POST\",\n\t\t\theaders: {\n\t\t\t\tAuthorization: `Basic ${credentials}`,\n\t\t\t\t\"Content-Type\": \"application/x-www-form-urlencoded\",\n\t\t\t},\n\t\t\tbody: new URLSearchParams({\n\t\t\t\tgrant_type: \"authorization_code\",\n\t\t\t\tcode,\n\t\t\t\tredirect_uri,\n\t\t\t}),\n\t\t});\n\n\t\tif (!tokenRes.ok) {\n\t\t\tconst errorText = await tokenRes.text();\n\t\t\treturn new Response(\n\t\t\t\tJSON.stringify({\n\t\t\t\t\terror: \"Failed to exchange token\",\n\t\t\t\t\tdetails: errorText,\n\t\t\t\t}),\n\t\t\t\t{\n\t\t\t\t\tstatus: tokenRes.status,\n\t\t\t\t\theaders: { \"Content-Type\": \"application/json\" },\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\n\t\tconst tokenData = await tokenRes.json();\n\n\t\treturn new Response(\n\t\t\tJSON.stringify({\n\t\t\t\taccess_token: tokenData.access_token,\n\t\t\t\trefresh_token: tokenData.refresh_token,\n\t\t\t\texpires_in: tokenData.expires_in,\n\t\t\t\tscope: tokenData.scope,\n\t\t\t\ttoken_type: tokenData.token_type,\n\t\t\t}),\n\t\t\t{\n\t\t\t\tstatus: 200,\n\t\t\t\theaders: { \"Content-Type\": \"application/json\" },\n\t\t\t}\n\t\t);\n\t} catch (error) {\n\t\tconsole.error(\"Error in /api/spotify/token:\", error);\n\t\treturn new Response(JSON.stringify({ error: \"Internal server error\" }), {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"Content-Type\": \"application/json\" },\n\t\t});\n\t}\n}\n"],"names":[],"mappings":";;;AAAO,eAAe,KAAK,GAAY;IACtC,IAAI;QACH,MAAM,OAAO,MAAM,IAAI,IAAI;QAC3B,MAAM,OAAO,KAAK,IAAI;QAEtB,IAAI,CAAC,MAAM;YACV,OAAO,IAAI,SACV,KAAK,SAAS,CAAC;gBAAE,OAAO;YAA6B,IACrD;gBACC,QAAQ;gBACR,SAAS;oBAAE,gBAAgB;gBAAmB;YAC/C;QAEF;QAEA,MAAM;QACN,MAAM,gBAAgB,QAAQ,GAAG,CAAC,qBAAqB;QACvD,MAAM;QAEN,MAAM,cAAc,OAAO,IAAI,CAAC,GAAG,UAAU,CAAC,EAAE,eAAe,EAAE,QAAQ,CACxE;QAGD,MAAM,WAAW,MAAM,MAAM,0CAA0C;YACtE,QAAQ;YACR,SAAS;gBACR,eAAe,CAAC,MAAM,EAAE,aAAa;gBACrC,gBAAgB;YACjB;YACA,MAAM,IAAI,gBAAgB;gBACzB,YAAY;gBACZ;gBACA;YACD;QACD;QAEA,IAAI,CAAC,SAAS,EAAE,EAAE;YACjB,MAAM,YAAY,MAAM,SAAS,IAAI;YACrC,OAAO,IAAI,SACV,KAAK,SAAS,CAAC;gBACd,OAAO;gBACP,SAAS;YACV,IACA;gBACC,QAAQ,SAAS,MAAM;gBACvB,SAAS;oBAAE,gBAAgB;gBAAmB;YAC/C;QAEF;QAEA,MAAM,YAAY,MAAM,SAAS,IAAI;QAErC,OAAO,IAAI,SACV,KAAK,SAAS,CAAC;YACd,cAAc,UAAU,YAAY;YACpC,eAAe,UAAU,aAAa;YACtC,YAAY,UAAU,UAAU;YAChC,OAAO,UAAU,KAAK;YACtB,YAAY,UAAU,UAAU;QACjC,IACA;YACC,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;QAC/C;IAEF,EAAE,OAAO,OAAO;QACf,QAAQ,KAAK,CAAC,gCAAgC;QAC9C,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;YAAE,OAAO;QAAwB,IAAI;YACvE,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;QAC/C;IACD;AACD","debugId":null}}]
}