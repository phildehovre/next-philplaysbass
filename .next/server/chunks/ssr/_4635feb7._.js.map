{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 19, "column": 0}, "map": {"version":3,"sources":["file:///Users/phil/Dev/philplaysbass/components/metronome/DropdownItem.tsx"],"sourcesContent":["import React from \"react\";\n\ninterface DropdownItemProps {\n  setDropdownOpen: React.Dispatch<React.SetStateAction<boolean>>;\n  setSoundEffect: React.Dispatch<React.SetStateAction<string>>;\n  dropdownOpen: boolean;\n  sound: string;\n}\n\nconst DropdownItem = (props: DropdownItemProps) => {\n  const { setDropdownOpen, setSoundEffect, dropdownOpen, sound } = props;\n\n  const handleClick = () => {\n    setSoundEffect(sound);\n    setDropdownOpen(!dropdownOpen);\n  };\n\n  return (\n    <div className=\"metro-dropdown-item\" onClick={handleClick}>\n      {sound}\n    </div>\n  );\n};\n\nexport default DropdownItem;\n"],"names":[],"mappings":";;;;;AASA,MAAM,eAAe,CAAC;IACpB,MAAM,EAAE,eAAe,EAAE,cAAc,EAAE,YAAY,EAAE,KAAK,EAAE,GAAG;IAEjE,MAAM,cAAc;QAClB,eAAe;QACf,gBAAgB,CAAC;IACnB;IAEA,qBACE,8OAAC;QAAI,WAAU;QAAsB,SAAS;kBAC3C;;;;;;AAGP;uCAEe","debugId":null}},
    {"offset": {"line": 47, "column": 0}, "map": {"version":3,"sources":["file:///Users/phil/Dev/philplaysbass/components/metronome/Dropdown.tsx"],"sourcesContent":["import DropdownItem from \"./DropdownItem\";\n\nconst Dropdown = (props: any) => {\n  const { dropdownOpen, soundEffect, setSoundEffect, setDropdownOpen } = props;\n\n  const sounds = [\"sidestick\", \"cowbell\", \"woodblock\"];\n\n  const renderDropdown = () => {\n    if (props.open) {\n      const newSounds = sounds.filter((sound) => {\n        return sound !== soundEffect;\n      });\n      return newSounds.map((sound) => {\n        return (\n          <DropdownItem\n            sound={sound}\n            key={sound}\n            setSoundEffect={setSoundEffect}\n            setDropdownOpen={setDropdownOpen}\n            dropdownOpen={dropdownOpen}\n          />\n        );\n      });\n    }\n  };\n\n  return (\n    <div className={`metro-dropdown${dropdownOpen ? ` open` : ` closed`}`}>\n      {renderDropdown()}\n    </div>\n  );\n};\n\nexport default Dropdown;\n"],"names":[],"mappings":";;;;AAAA;;;AAEA,MAAM,WAAW,CAAC;IAChB,MAAM,EAAE,YAAY,EAAE,WAAW,EAAE,cAAc,EAAE,eAAe,EAAE,GAAG;IAEvE,MAAM,SAAS;QAAC;QAAa;QAAW;KAAY;IAEpD,MAAM,iBAAiB;QACrB,IAAI,MAAM,IAAI,EAAE;YACd,MAAM,YAAY,OAAO,MAAM,CAAC,CAAC;gBAC/B,OAAO,UAAU;YACnB;YACA,OAAO,UAAU,GAAG,CAAC,CAAC;gBACpB,qBACE,8OAAC,wIAAA,CAAA,UAAY;oBACX,OAAO;oBAEP,gBAAgB;oBAChB,iBAAiB;oBACjB,cAAc;mBAHT;;;;;YAMX;QACF;IACF;IAEA,qBACE,8OAAC;QAAI,WAAW,CAAC,cAAc,EAAE,eAAe,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE;kBAClE;;;;;;AAGP;uCAEe","debugId":null}},
    {"offset": {"line": 96, "column": 0}, "map": {"version":3,"sources":["file:///Users/phil/Dev/philplaysbass/components/metronome/SongCard.tsx"],"sourcesContent":["import \"./SongCard.scss\";\nimport { Song } from \"../lib/types\";\nimport { animate, stagger } from \"motion\";\nimport { useLayoutEffect } from \"react\";\n\nfunction SongCard(props: { song: Song }) {\n  const { song } = props;\n\n  useLayoutEffect(() => {\n    animate(\n      \".songcard\",\n      { opacity: [0, 1] },\n      { duration: 1, delay: stagger(0.1) }\n    );\n  }, []);\n\n  const renderGenres = (genres: string[]) => {\n    if (genres) {\n      const newArr = [];\n      for (let i = 0; i < genres.length; i++) {\n        newArr.push(genres[i][0].toUpperCase() + genres[i].slice(1));\n      }\n      return newArr.join(\", \");\n    }\n    return undefined;\n  };\n\n  const formatTitle = (title: string) => {\n    if (title.length > 30) {\n      return title.split(\" \").slice(0, 5).join(\" \") + \"...\";\n    }\n    return title;\n  };\n\n  return (\n    <>\n      <div className=\"songcard\">\n        <div className=\"songcard-left\">\n          <div>\n            <div className=\"songcard-title\">{formatTitle(song.song_title)}</div>\n            <div className=\"songcard-artist\">{song.artist.name}</div>\n          </div>\n        </div>\n        <div>{renderGenres(song.artist.genres)}</div>\n      </div>\n    </>\n  );\n}\n\nexport default SongCard;\n"],"names":[],"mappings":";;;;;;;;;AAGA;;;;;AAEA,SAAS,SAAS,KAAqB;IACrC,MAAM,EAAE,IAAI,EAAE,GAAG;IAEjB,CAAA,GAAA,qMAAA,CAAA,kBAAe,AAAD,EAAE;QACd,QACE,aACA;YAAE,SAAS;gBAAC;gBAAG;aAAE;QAAC,GAClB;YAAE,UAAU;YAAG,OAAO,QAAQ;QAAK;IAEvC,GAAG,EAAE;IAEL,MAAM,eAAe,CAAC;QACpB,IAAI,QAAQ;YACV,MAAM,SAAS,EAAE;YACjB,IAAK,IAAI,IAAI,GAAG,IAAI,OAAO,MAAM,EAAE,IAAK;gBACtC,OAAO,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC,WAAW,KAAK,MAAM,CAAC,EAAE,CAAC,KAAK,CAAC;YAC3D;YACA,OAAO,OAAO,IAAI,CAAC;QACrB;QACA,OAAO;IACT;IAEA,MAAM,cAAc,CAAC;QACnB,IAAI,MAAM,MAAM,GAAG,IAAI;YACrB,OAAO,MAAM,KAAK,CAAC,KAAK,KAAK,CAAC,GAAG,GAAG,IAAI,CAAC,OAAO;QAClD;QACA,OAAO;IACT;IAEA,qBACE;kBACE,cAAA,8OAAC;YAAI,WAAU;;8BACb,8OAAC;oBAAI,WAAU;8BACb,cAAA,8OAAC;;0CACC,8OAAC;gCAAI,WAAU;0CAAkB,YAAY,KAAK,UAAU;;;;;;0CAC5D,8OAAC;gCAAI,WAAU;0CAAmB,KAAK,MAAM,CAAC,IAAI;;;;;;;;;;;;;;;;;8BAGtD,8OAAC;8BAAK,aAAa,KAAK,MAAM,CAAC,MAAM;;;;;;;;;;;;;AAI7C;uCAEe","debugId":null}},
    {"offset": {"line": 196, "column": 0}, "map": {"version":3,"sources":["file:///Users/phil/Dev/philplaysbass/components/metronome/SongList.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport \"./SongList.scss\";\n\nimport SongCard from \"./SongCard\";\nimport { fetchTempoData } from \"../api/helpers\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Song } from \"../lib/types\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faChevronLeft,\n  faChevronRight,\n  faSpinner,\n} from \"@fortawesome/free-solid-svg-icons\";\n\nfunction SongList(props: any) {\n  const { bpm, showSongs } = props;\n  const [songs, setSongs] = useState([]);\n  const [listStart, setListStart] = useState(0);\n  const [listEnd, setListEnd] = useState(12);\n  const [pageCounter, setPageCounter] = useState(1);\n\n  const { data, isLoading } = useQuery(\n    [\"tempoData\", bpm],\n    () => fetchTempoData(bpm),\n    {\n      enabled: !!showSongs,\n    }\n  );\n\n  //   console.log(\"data\", data, showSongs, songs);\n\n  useEffect(() => {\n    setSongs(data?.slice(listStart, listEnd));\n  }, [data, listStart, listEnd]);\n\n  const renderSongListWithNav = () => {\n    if (data && showSongs) {\n      return (\n        <>\n          {renderSongList()}\n          <div className=\"songlist-nav-ctn\">\n            <FontAwesomeIcon\n              icon={faChevronLeft}\n              className=\"songlist-nav-btn\"\n              onClick={() => handleNavClick(\"prev\")}\n              size=\"xl\"\n            />\n            <div>Page {pageCounter}</div>\n            <FontAwesomeIcon\n              icon={faChevronRight}\n              className=\"songlist-nav-btn\"\n              onClick={() => handleNavClick(\"next\")}\n              size=\"xl\"\n            />\n          </div>\n        </>\n      );\n    }\n  };\n\n  const renderSongList = () => {\n    return songs?.map((song: Song) => {\n      return <SongCard song={song} key={song.song_id} />;\n    });\n  };\n\n  const handleNavClick = (value: \"prev\" | \"next\") => {\n    if (value === \"prev\") {\n      if (listStart > 0) {\n        setListStart(listStart - 10);\n        setListEnd(listEnd - 10);\n        if (pageCounter !== 1) {\n          setPageCounter(pageCounter - 1);\n        }\n      }\n    }\n    if (value === \"next\") {\n      if (listEnd < 250) {\n        setListStart(listStart + 10);\n        setListEnd(listEnd + 10);\n        setPageCounter(pageCounter + 1);\n      }\n    }\n  };\n\n  if (!showSongs) return;\n\n  return (\n    <>\n      <div className={`metro-songlist ${showSongs ? \"open\" : \"closed\"}`}>\n        {!isLoading && data?.length > 0 ? (\n          renderSongListWithNav()\n        ) : (\n          <FontAwesomeIcon\n            icon={faSpinner}\n            spin\n            className=\"songList-spinner\"\n            size=\"2x\"\n          />\n        )}\n      </div>\n    </>\n  );\n}\n\nexport default SongList;\n"],"names":[],"mappings":";;;;AAAA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAWA,SAAS,SAAS,KAAU;IAC1B,MAAM,EAAE,GAAG,EAAE,SAAS,EAAE,GAAG;IAC3B,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE,EAAE;IACrC,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAC3C,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACvC,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAE/C,MAAM,EAAE,IAAI,EAAE,SAAS,EAAE,GAAG,SAC1B;QAAC;QAAa;KAAI,EAClB,IAAM,eAAe,MACrB;QACE,SAAS,CAAC,CAAC;IACb;IAGF,iDAAiD;IAEjD,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,SAAS,MAAM,MAAM,WAAW;IAClC,GAAG;QAAC;QAAM;QAAW;KAAQ;IAE7B,MAAM,wBAAwB;QAC5B,IAAI,QAAQ,WAAW;YACrB,qBACE;;oBACG;kCACD,8OAAC;wBAAI,WAAU;;0CACb,8OAAC;gCACC,MAAM;gCACN,WAAU;gCACV,SAAS,IAAM,eAAe;gCAC9B,MAAK;;;;;;0CAEP,8OAAC;;oCAAI;oCAAM;;;;;;;0CACX,8OAAC;gCACC,MAAM;gCACN,WAAU;gCACV,SAAS,IAAM,eAAe;gCAC9B,MAAK;;;;;;;;;;;;;;QAKf;IACF;IAEA,MAAM,iBAAiB;QACrB,OAAO,OAAO,IAAI,CAAC;YACjB,qBAAO,8OAAC,oIAAA,CAAA,UAAQ;gBAAC,MAAM;eAAW,KAAK,OAAO;;;;;QAChD;IACF;IAEA,MAAM,iBAAiB,CAAC;QACtB,IAAI,UAAU,QAAQ;YACpB,IAAI,YAAY,GAAG;gBACjB,aAAa,YAAY;gBACzB,WAAW,UAAU;gBACrB,IAAI,gBAAgB,GAAG;oBACrB,eAAe,cAAc;gBAC/B;YACF;QACF;QACA,IAAI,UAAU,QAAQ;YACpB,IAAI,UAAU,KAAK;gBACjB,aAAa,YAAY;gBACzB,WAAW,UAAU;gBACrB,eAAe,cAAc;YAC/B;QACF;IACF;IAEA,IAAI,CAAC,WAAW;IAEhB,qBACE;kBACE,cAAA,8OAAC;YAAI,WAAW,CAAC,eAAe,EAAE,YAAY,SAAS,UAAU;sBAC9D,CAAC,aAAa,MAAM,SAAS,IAC5B,wCAEA,8OAAC;gBACC,MAAM;gBACN,IAAI;gBACJ,WAAU;gBACV,MAAK;;;;;;;;;;;;AAMjB;uCAEe","debugId":null}},
    {"offset": {"line": 355, "column": 0}, "map": {"version":3,"sources":["file:///Users/phil/Dev/philplaysbass/components/metronome/Metronome.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\n//@ts-ignore\nimport useSound from \"use-sound\";\n\nimport \"./metronome.scss\";\nimport Dropdown from \"./Dropdown\";\nimport Sidestick from \"../assets/Click.wav\";\nimport Cowbell from \"../assets/Cowbell.mp3\";\nimport Woodblock from \"../assets/Woodblock.mp3\";\nimport SongList from \"./SongList\";\nimport Description from \"./Description\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faBars } from \"@fortawesome/free-solid-svg-icons\";\n\nconst Metronome = ({\n  showSongs,\n  setShowSongs,\n}: {\n  showSongs: boolean;\n  setShowSongs: React.Dispatch<React.SetStateAction<boolean>>;\n}) => {\n  const [play, setPlay] = useState(false);\n  const [bpm, setBpm] = useState(120);\n  const [tempoInterval, setTempoInterval] = useState<number>(0);\n  const [tapped, setTapped] = useState<number>();\n  const [soundEffect, setSoundEffect] = useState(\"sidestick\");\n  const [debouncedBpm, setDebouncedBpm] = useState(bpm);\n  const [dropdownOpen, setDropdownOpen] = useState(false);\n  // const [searchTerm, setSearchTerm] = useState('Search')\n  const [listSize, setListSize] = useState(12);\n  const [pulse, setPulse] = useState(false);\n\n  const [cowbell] = useSound(Cowbell);\n  const [woodblock] = useSound(Woodblock);\n  const [sidestick] = useSound(Sidestick);\n\n  // ========================== Tap Tempo Logic:\n\n  const tapTempo = () => {\n    if (tapped) {\n      let elapsed = new Date().getTime() - tapped;\n      if (elapsed < 2500) {\n        const tappedBpm = Math.round((6000 / elapsed) * 10);\n        setBpm(tappedBpm);\n      } else {\n        setTapped(new Date().getTime());\n      }\n    }\n    setTapped(new Date().getTime());\n  };\n\n  const playSound = useCallback(() => {\n    if (soundEffect === \"cowbell\") {\n      cowbell();\n    } else if (soundEffect === \"woodblock\") {\n      woodblock();\n    } else {\n      sidestick();\n    }\n  }, [soundEffect, cowbell, woodblock, sidestick]);\n\n  // Sound and Visual:\n\n  const trigger = useCallback(() => {\n    if (play) {\n      playSound();\n    } else {\n      return;\n    }\n  }, [play, playSound]);\n\n  const startClick = () => {\n    setPlay(!play);\n  };\n\n  // Tempo setter:\n  useEffect(() => {\n    if (play) {\n      const intervalId = setInterval(() => {\n        trigger();\n        setPulse(true);\n        setTimeout(() => {\n          setPulse(false);\n        }, tempoInterval - tempoInterval * 0.1);\n      }, tempoInterval);\n      return () => {\n        clearInterval(intervalId);\n      };\n    }\n  }, [play, tempoInterval, soundEffect, trigger]);\n\n  useEffect(() => {\n    setTempoInterval((60 / bpm) * 1000);\n    if (bpm <= 40) {\n      setBpm(40);\n    }\n    if (bpm >= 220) {\n      setBpm(220);\n    }\n    const intervalId = setTimeout(() => {\n      setDebouncedBpm(bpm);\n    }, 500);\n    return () => {\n      clearTimeout(intervalId);\n    };\n  }, [bpm]);\n\n  const handleDisplaySongsList = () => {\n    setShowSongs(!showSongs);\n  };\n\n  const increment = () => {\n    setBpm(Number(bpm) + 1);\n  };\n  const decrement = () => {\n    setBpm(Number(bpm) - 1);\n  };\n\n  return (\n    <div className=\"metronome-ctn\">\n      <Description />\n      <div className={`metronome ${pulse ? \"pulse\" : \"\"}`}>\n        <h1>Metronome</h1>\n        <div className=\"metro-display\">\n          <div className=\"metro-btn decrement\" onClick={decrement}>\n            -\n          </div>\n          <div className=\"metro-display bpm\">{bpm}</div>\n          <div className=\"metro-btn increment\" onClick={increment}>\n            +\n          </div>\n        </div>\n        <input\n          type=\"range\"\n          min=\"40\"\n          max=\"220\"\n          value={bpm}\n          onChange={(e) => setBpm(Number(e.target.value))}\n        />\n        <div className=\"metro-controls\">\n          <div\n            onClick={startClick}\n            className={`metro-btn ${play ? `pause` : `play`} noSelect`}\n            id=\"metro-there\"\n            style={{ animationDuration: `${tempoInterval}ms` }}\n          ></div>\n          <div\n            className=\"metro-btn-generate\"\n            onClick={() => handleDisplaySongsList()}\n          >\n            <FontAwesomeIcon icon={faBars} size=\"2x\" />\n          </div>\n\n          <div onClick={tapTempo} className=\"metro-btn-tap\">\n            <div className=\"outer\">\n              <div className=\"inner\"></div>\n            </div>\n          </div>\n          <div\n            className=\"metro-dropdown-header\"\n            onClick={() => setDropdownOpen(!dropdownOpen)}\n          >\n            {soundEffect}\n            <Dropdown\n              open={dropdownOpen}\n              soundEffect={soundEffect}\n              setSoundEffect={setSoundEffect}\n              dropdownOpen={dropdownOpen}\n              setDropdownOpen={setDropdownOpen}\n            />\n          </div>\n        </div>\n        <h6 style={{ color: \"var(--secondary)\" }}>Powered by GetSongBpm.com</h6>\n        <SongList\n          bpm={debouncedBpm}\n          showSongs={showSongs}\n          listSize={listSize}\n          setListSize={setListSize}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Metronome;\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 695, "column": 0}, "map": {"version":3,"sources":["file:///Users/phil/Dev/philplaysbass/app/metronome/page.tsx"],"sourcesContent":["import Metronome from \"@/components/metronome/Metronome\";\nimport React, { useState } from \"react\";\n\nconst page = () => {\n\tconst [showSongs, setShowSongs] = useState(false);\n\n\treturn (\n\t\t<div>\n\t\t\t<Metronome setShowSongs={setShowSongs} showSongs={showSongs} />\n\t\t</div>\n\t);\n};\n\nexport default page;\n"],"names":[],"mappings":";;;;AAAA;AACA;;;;AAEA,MAAM,OAAO;IACZ,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAE3C,qBACC,8OAAC;kBACA,cAAA,8OAAC,qIAAA,CAAA,UAAS;YAAC,cAAc;YAAc,WAAW;;;;;;;;;;;AAGrD;uCAEe","debugId":null}}]
}